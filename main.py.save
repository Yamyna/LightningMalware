import sys
import pyclamd
import subprocess
from pysafebrowsing import SafeBrowsing
import requests
from API_KEY import *
AlienVault Open Threat Exchange (OTX) propose une API publique que vous pouvez utiliser pour accéder aux informations sur les menaces. Voici comment vous pouvez utiliser l'API OTX d'AlienVault avec Python :

1. **Inscription sur OTX :**
   - Avant d'utiliser l'API OTX, assurez-vous de vous inscrire sur le site d'AlienVault OTX et de créer un compte. Vous devrez également générer une clé d'API depuis votre compte OTX.

2. **Installer la bibliothèque `otx-py` :**
   - Il existe une bibliothèque Python officielle pour interagir avec l'API OTX. Vous pouvez l'installer à l'aide de `pip` :
     ```bash
     pip install OTXv2
     ```

3. **Utiliser l'API OTX dans Python :**
   - Voici un exemple simple qui utilise la bibliothèque `otx-py` pour obtenir les indicateurs d'une menace à partir de l'API OTX :
     ```python
     from OTXv2 import OTXv2, IndicatorTypes

     # Remplacez 'YOUR_API_KEY' par votre propre clé API OTX
     api_key = 'YOUR_API_KEY'

     # Initialisez l'objet OTX avec votre clé API
     otx = OTXv2(api_key)

     # Remplacez 'indicator' par l'indicateur que vous souhaitez rechercher (adresse IP, domaine, etc.)
     indicator = 'indicator'

     # Obtenez les détails de l'indicateur
     result = otx.get_indicator_details_full(IndicatorTypes.DOMAIN, indicator)

     # Affichez les détails
     print(result)
     ```

   Assurez-vous de remplacer `'YOUR_API_KEY'` par votre clé API OTX et `'indicator'` par l'indicateur que vous souhaitez rechercher (par exemple, une adresse IP ou un domaine).

N'oubliez pas de lire et de respecter les conditions d'utilisation de l'API OTX, et assurez-vous que vous comprenez les limites d'utilisation gratuites et payantes de l'API. Pour plus d'informations, vous pouvez consulter la documentation officielle de l'API OTX sur le site d'AlienVault.

def Analyse_urls_api_Google(Google_key, url):

    """
    This function is used to API call to Google form analysis the urls if malicious or not
    :param Google_key:  API key for Google
    :param url: URL to analyze
    :return: response from Google form analysis

    """

    client = SafeBrowsing(Google_key) #utilisé pour effectuer des recherches de menaces en utilisant l'API Google Safe Browsing.
    test_url = client.lookup_urls([url])
    return test_url


if __name__ == '__main__':

    print(Analyse_urls_api_Google(Google_key, 'http://malware.testing.google.test/testing/malware/'))
